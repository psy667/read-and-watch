{"version":3,"sources":["reducers/records.js","reducers/tags.js","reducers/combined.js","actions/actionTypes.js","database.js","components/Record/component.js","actions/actions.js","containers/RecordsList/container.js","components/InputType/component.js","components/InputTitle/component.js","components/InputDescription/component.js","components/InputLink/component.js","components/InputTags/component.js","components/RecordCreateForm/component.js","containers/RecordCreate/container.js","pages/Main/page.js","App.js","serviceWorker.js","index.js"],"names":["initialState","list","newRecord","title","description","type","tags","showForm","combineReducers","records","state","arguments","length","undefined","action","_objectSpread","payload","_action$payload","id","currentStatus","map","item","status","_action$payload2","key","value","includes","Object","defineProperty","record","tags_objectSpread","database","_database","apply","this","_callee7","DB","regenerator_default","a","wrap","_context7","prev","next","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","createIndex","abrupt","stop","deleteRecord","_ref","asyncToGenerator","mark","_callee","_context","then","delete","_x","updateRecord","_ref2","_callee2","_context2","put","_x2","addRecord","_ref3","_callee3","newRecordObject","_context3","database_objectSpread","date","Date","getTime","add","_x3","addTag","_ref4","_callee4","tag","_context4","_x4","getRecords","_ref5","_callee5","_context5","getAll","getTags","_ref6","_callee6","_context6","Text","Typography","Title","Record","props","onStatusChange","onDelete","onEdit","_useState","useState","_useState2","slicedToArray","showFullInfo","setShowMode","react_default","createElement","card","className","cx","full-info","onMouseEnter","onMouseLeave","es_tag","color","toUpperCase","onClick","es_button","shape","icon","size","level","toLocaleDateString","setNewRecordsListAction","setNewTagsListAction","actions","toggleStatus","setNewRecordsList","editRecord","setNewTagsList","RecordsListContainer","connect","store","updateStore","data","useEffect","handleToggleStatus","updatedRecord","container_objectSpread","show-form","component_Record","link","empty","InputType","onChange","es_form","Item","es_radio","Group","e","target","defaultValue","buttonStyle","Button","InputTitle","label","input","TextArea","Input","InputDescription","autosize","InputLink","Option","Select","InputTags","children","es_select","mode","style","width","placeholder","RecordCreateForm","onCreate","newRecordData","visible","closeForm","drawer","placement","height","onClose","onSubmit","preventDefault","htmlType","block","disabled","setValueNewRecord","openForm","RecordCreateContainer","component_RecordCreateForm","component_InputType","component_InputLink","component_InputTitle","component_InputDescription","component_InputTags","Main","App","react_router_dom","react_router","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6c812dc.chunk.js","sourcesContent":["import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    list: [\n    ],\n    newRecord: {\n        title: null,\n        description: \"\",\n        type: \"book\",\n        tags: [],\n    },\n    showForm: false,\n\n};\n\nexport const recordsReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case actions.RECORDS_LIST_UPDATE: {\n        const { records } = action.payload;\n        return {\n            ...state,\n            list: records,\n        };\n    }\n    case actions.RECORDS_LIST_SET_STATUS: {\n        const { id, currentStatus } = action.payload;\n\n        const list = state.list.map((item) => {\n            if (item.id === id) {\n                return { ...item, status: currentStatus === \"complete\" ? \"incomplete\" : \"complete\" };\n            }\n            return item;\n        });\n\n        return {\n            ...state,\n            list,\n        };\n    }\n    case actions.RECORD_CREATE_SET_VALUE: {\n        const { key, value } = action.payload;\n        if ([\"title\", \"description\", \"type\", \"tags\", \"link\"].includes(key)) {\n            return {\n                ...state,\n                newRecord: { ...state.newRecord, [key]: value },\n            };\n        }\n        return state;\n    }\n    case actions.RECORD_EDIT: {\n        return {\n            ...state,\n            newRecord: action.payload.record,\n            showForm: true,\n        };\n    }\n    // case actions.RECORD_CREATE: {\n    //     const newRecord = {\n    //         ...action.payload.record,\n    //         id: getNewId(),\n    //         date: new Date().getTime(),\n    //         status: \"incomplete\",\n    //     };\n    //     return {\n    //         ...state,\n    //         list: [...state.list, action.payload.record],\n    //         newRecord: {\n    //             title: null,\n    //             description: null,\n    //             type: null,\n    //             tags: [],\n    //         },\n    //     };\n    // }\n    case actions.FORM_CLOSE:\n        return {\n            ...state,\n            showForm: false,\n            newRecord: {\n                title: null,\n                description: \"\",\n                type: \"book\",\n                tags: [],\n            },\n        };\n    case actions.FORM_OPEN:\n        return {\n            ...state,\n            showForm: true,\n        };\n    default:\n        return state;\n    }\n};\n","import * as actions from \"../actions/actionTypes\";\n\nconst initialState = {\n    list: [\n        \"Художественная литература\",\n        \"20-ый век\",\n        \"Антиутопия\",\n    ],\n};\n\n\nexport const tagsReducer = (state = initialState, action) => {\n    switch (action.type) {\n    case actions.TAGS_LIST_UPDATE: {\n        const { tags } = action.payload;\n        return {\n            ...state,\n            list: tags.map((item) => item.id),\n        };\n    }\n    default:\n        return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport { recordsReducer } from \"./records\";\nimport { tagsReducer } from \"./tags\";\n\nexport default combineReducers({ records: recordsReducer, tags: tagsReducer });\n","export const RECORDS_LIST_FILTER = \"RECORDS_LIST_FILTER\";\nexport const RECORDS_LIST_SORT = \"RECORDS_LIST_SORT\";\nexport const RECORDS_LIST_SET_STATUS = \"RECORDS_LIST_SET_STATUS\";\nexport const RECORD_CREATE_SET_VALUE = \"RECORD_CREATE_SET_VALUE\";\nexport const RECORD_CREATE = \"RECORD_CREATE\";\n// export const RECORD_CREATE_SET_DESCRIPTION = \"RECORD_CREATE_SET_DESCRIPTION\";\n// export const RECORD_CREATE_SET_TYPE = \"RECORD_CREATE_SET_TYPE\";\n// export const RECORD_CREATE_SET_TAGS = \"RECORD_CREATE_SET_TAGS\";\n// export const RECORD_CREATE_SET_LINK = \"RECORD_CREATE_SET_LINK\";\nexport const RECORD_EDIT_SET_TITLE = \"RECORD_EDIT_SET_TITLE\";\nexport const RECORD_EDIT_SET_DESCRIPTION = \"RECORD_EDIT_SET_DESCRIPTION\";\nexport const RECORD_EDIT_SET_TYPE = \"RECORD_EDIT_SET_TYPE\";\nexport const RECORD_EDIT_SET_TAGS = \"RECORD_EDIT_SET_TAGS\";\nexport const RECORD_EDIT_SET_LINK = \"RECORD_EDIT_SET_LINK\";\nexport const RECORD_REMOVE = \"RECORD_REMOVE\";\nexport const TAG_DELETE = \"TAG_DELETE\";\nexport const TAG_RENAME = \"TAG_RENAME\";\nexport const TAG_SET_NAME = \"TAG_SET_NAME\";\nexport const FORM_CLOSE = \"FORM_CLOSE\";\nexport const FORM_OPEN = \"FORM_OPEN\";\nexport const RECORDS_LIST_UPDATE = \"RECORDS_LIST_UPDATE\";\nexport const RECORD_EDIT = \"RECORD_EDIT\";\nexport const TAGS_LIST_UPDATE = \"TAGS_LIST_UPDATE\";\n// export const = \"\";\n","import { openDB } from \"idb\";\n\n\nexport async function database() {\n    const DB = openDB(\"read-and-watch\", 1, {\n        upgrade(db) {\n            const store = db.createObjectStore(\"records\", {\n                keyPath: \"id\",\n                autoIncrement: true,\n            });\n            store.createIndex(\"date\", \"date\");\n\n            db.createObjectStore(\"tags\", {\n                keyPath: \"id\",\n                autoIncrement: true,\n            });\n        },\n    });\n    return DB;\n}\n\nexport const deleteRecord = async (key) => database().then((db) => db.delete(\"records\", key));\n\nexport const updateRecord = async (value) => database().then((db) => db.put(\"records\", value));\n\nexport const addRecord = async (record) => {\n    if (record.id) {\n        return database().then((db) => db.put(\"records\", record));\n    }\n    const newRecordObject = {\n        ...record,\n        date: new Date().getTime(),\n        status: \"incomplete\",\n    };\n    return database().then((db) => {\n        db.add(\"records\", newRecordObject);\n    });\n};\n\nexport const addTag = async (tag) => database().then((db) => db.put(\"tags\", tag));\n\nexport const getRecords = async () => database().then((db) => db.getAll(\"records\"));\nexport const getTags = async () => database().then((db) => db.getAll(\"tags\"));\n","import React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport {\n    Card, Typography, Tag, Button,\n} from \"antd\";\nimport \"./styles.scss\";\n\nconst { Text, Title } = Typography;\n\nexport const Record = (props) => {\n    const {\n        title,\n        description,\n        type,\n        date,\n        status,\n        tags,\n        onStatusChange,\n        onDelete,\n        onEdit,\n    } = props;\n\n    const [showFullInfo, setShowMode] = useState(false);\n\n    const getDateString = (isoTime) => new Date(isoTime).toLocaleDateString(\"ru-ru\");\n\n    return (\n        <Card className={cx(\"record\", { \"full-info\": showFullInfo })} onMouseEnter={() => setShowMode(true)} onMouseLeave={() => setShowMode(false)}>\n            <div className=\"header\">\n                <div className=\"tag-wrapper\">\n                    <Tag color=\"#108ee9\">{type.toUpperCase()}</Tag>\n                    <Tag color={status === \"complete\" ? \"green\" : \"volcano\"} onClick={onStatusChange}>{status.toUpperCase()}</Tag>\n                </div>\n                <div className=\"button-wrapper\">\n                    <Button type=\"normal\" shape=\"circle\" icon=\"edit\" size=\"small\" onClick={onEdit} />\n                    <Button type=\"normal\" shape=\"circle\" icon=\"close\" size=\"small\" onClick={onDelete} />\n                </div>\n\n\n            </div>\n            <Title level={4}>{title}</Title>\n            <Text className=\"description\">{description}</Text>\n            <div className=\"tags\">\n                {\n                    tags.map((item) => <Tag key={item}>{item}</Tag>)\n                }\n            </div>\n            <Text className=\"date\" type=\"secondary\">{getDateString(date)}</Text>\n\n        </Card>\n    );\n};\n","import {\n    RECORDS_LIST_FILTER,\n    RECORDS_LIST_SORT,\n    RECORDS_LIST_SET_STATUS,\n    RECORD_CREATE,\n    RECORD_CREATE_SET_VALUE,\n    RECORD_EDIT_SET_TITLE,\n    RECORD_EDIT_SET_DESCRIPTION,\n    RECORD_EDIT_SET_TYPE,\n    RECORD_EDIT_SET_TAGS,\n    RECORD_EDIT_SET_LINK,\n    RECORD_REMOVE,\n    TAG_DELETE,\n    TAG_RENAME,\n    TAG_SET_NAME,\n    FORM_CLOSE,\n    FORM_OPEN,\n    RECORDS_LIST_UPDATE,\n    RECORD_EDIT,\n    TAGS_LIST_UPDATE,\n} from \"./actionTypes\";\n\nexport const toggleStatusAction = (id, currentStatus) => ({\n    type: RECORDS_LIST_SET_STATUS,\n    payload: {\n        id,\n        currentStatus,\n    },\n});\n\nexport const setValueNewRecordAction = (key, value) => ({\n    type: RECORD_CREATE_SET_VALUE,\n    payload: {\n        key,\n        value,\n    },\n});\n\nexport const createRecordAction = (record) => ({\n    type: RECORD_CREATE,\n    payload: {\n        record,\n    },\n});\n\nexport const closeFormAction = () => ({\n    type: FORM_CLOSE,\n});\n\nexport const openFormAction = () => ({\n    type: FORM_OPEN,\n});\n\nexport const setNewRecordsListAction = (records) => ({\n    type: RECORDS_LIST_UPDATE,\n    payload: {\n        records,\n    },\n});\n\nexport const editRecordAction = (record) => ({\n    type: RECORD_EDIT,\n    payload: {\n        record,\n    },\n});\n\nexport const setNewTagsListAction = (tags) => ({\n    type: TAGS_LIST_UPDATE,\n    payload: {\n        tags,\n    },\n});\n","import React, { useEffect } from \"react\";\nimport cx from \"classnames\";\nimport { Empty } from \"antd\";\nimport { connect } from \"react-redux\";\nimport {\n    getRecords, deleteRecord, updateRecord, getTags,\n} from \"../../database\";\nimport { Record } from \"../../components/Record/component\";\nimport {\n    toggleStatusAction, setNewRecordsListAction, editRecordAction, setNewTagsListAction,\n} from \"../../actions/actions\";\nimport \"./styles.scss\";\n\nconst RecordsList = (props) => {\n    const {\n        records, setNewRecordsList, editRecord, setNewTagsList, showForm,\n    } = props;\n\n\n    const updateStore = () => {\n        getRecords().then((data) => setNewRecordsList(data));\n        getTags().then((data) => setNewTagsList(data));\n    };\n    useEffect(updateStore, []);\n\n    const handleDeleteRecord = (id) => {\n        deleteRecord(id).then(updateStore);\n    };\n\n    const handleToggleStatus = (id, record) => {\n        const updatedRecord = { ...record, status: record.status === \"complete\" ? \"incomplete\" : \"complete\" };\n        updateRecord(updatedRecord).then(updateStore);\n    };\n\n    return (\n        <div className={cx(\"record-list\", { \"show-form\": showForm })}>\n            {\n                records.map((item) => (\n                    <Record\n                        key={item.id}\n                        title={item.title}\n                        description={item.description}\n                        type={item.type}\n                        date={item.date}\n                        tags={item.tags}\n                        link={item.link}\n                        status={item.status}\n                        onStatusChange={() => handleToggleStatus(item.id, item)}\n                        onDelete={() => handleDeleteRecord(item.id)}\n                        onEdit={() => editRecord(item)}\n                    />\n                ))\n            }\n            {\n                records.length === 0\n                && <Empty />\n            }\n        </div>\n    );\n};\n\nconst mapStateToProps = (store) => ({\n    records: store.records.list,\n    tags: store.tags.list,\n    showForm: store.records.showForm,\n});\n\nconst actions = {\n    toggleStatus: toggleStatusAction,\n    setNewRecordsList: setNewRecordsListAction,\n    editRecord: editRecordAction,\n    setNewTagsList: setNewTagsListAction,\n};\n\nexport const RecordsListContainer = connect(mapStateToProps, actions)(RecordsList);\n","import React from \"react\";\nimport { Radio, Form } from \"antd\";\nimport \"./styles.scss\";\n\n\nexport const InputType = (props) => {\n    const {\n        onChange,\n        value,\n    } = props;\n    const handleInput = (e) => onChange(e.target.value);\n\n    return (\n        <div className=\"input-type\">\n            <Form.Item>\n                <Radio.Group onChange={handleInput} defaultValue={value} buttonStyle=\"solid\">\n                    <Radio.Button value=\"book\">Book</Radio.Button>\n                    <Radio.Button value=\"article\">Article</Radio.Button>\n                    <Radio.Button value=\"movie\">Movie</Radio.Button>\n                    <Radio.Button value=\"video\">Video</Radio.Button>\n                </Radio.Group>\n            </Form.Item>\n        </div>\n\n    );\n};\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\n\n\nimport \"./styles.scss\";\n\n\nexport const InputTitle = (props) => {\n    const {\n        onChange,\n        value,\n    } = props;\n    const handleInput = (e) => onChange(e.target.value);\n\n    return (\n        <Form.Item label=\"Title\">\n            <Input value={value} onChange={handleInput} />\n        </Form.Item>\n    );\n};\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\n\nimport \"./styles.scss\";\n\nconst { TextArea } = Input;\n\n\nexport const InputDescription = (props) => {\n    const {\n        onChange,\n        value,\n    } = props;\n    const handleInput = (e) => onChange(e.target.value);\n\n    return (\n        <Form.Item label=\"Description\">\n            <TextArea value={value} onChange={handleInput} autosize />\n        </Form.Item>\n    );\n};\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\n\n\nimport \"./styles.scss\";\n\n\nexport const InputLink = (props) => {\n    const {\n        onChange,\n        value,\n    } = props;\n    const handleInput = (e) => onChange(e.target.value);\n\n    return (\n        <Form.Item label=\"Link\">\n            <Input value={value} onChange={handleInput} />\n        </Form.Item>\n    );\n};\n","import React from \"react\";\nimport { Select, Form } from \"antd\";\n\nimport \"./styles.scss\";\n\nconst { Option } = Select;\n\n\nexport const InputTags = (props) => {\n    const {\n        onChange,\n        children,\n        value,\n    } = props;\n    const handleInput = (e) => onChange(e);\n\n    return (\n        <Form.Item label=\"Tags\">\n            <Select\n                mode=\"tags\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                onChange={handleInput}\n                value={value}\n            >\n                {\n                    children.map((item) => (\n                        <Option key={item} value={item}>\n                            {item}\n                        </Option>\n                    ))\n                }\n            </Select>\n        </Form.Item>\n    );\n};\n","import React from \"react\";\n\nimport { Form, Button, Drawer } from \"antd\";\nimport \"./styles.scss\";\n\nexport const RecordCreateForm = (props) => {\n    const {\n        onCreate,\n        newRecordData,\n        children,\n        visible,\n        closeForm,\n    } = props;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onCreate(newRecordData);\n    };\n\n    return (\n        <Drawer\n            title=\"Add new record\"\n            placement=\"bottom\"\n            height={400}\n            visible={visible}\n            onClose={closeForm}\n        >\n            <Form\n                onSubmit={handleSubmit}\n            >\n                {children}\n                <Button className=\"button-save\" type=\"primary\" htmlType=\"submit\" block disabled={!newRecordData.title}>Save</Button>\n            </Form>\n        </Drawer>\n    );\n};\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { Button } from \"antd\";\nimport {\n    setValueNewRecordAction,\n    closeFormAction,\n    openFormAction,\n    setNewRecordsListAction,\n    setNewTagsListAction,\n} from \"../../actions/actions\";\nimport \"./styles.scss\";\n\nimport { InputType } from \"../../components/InputType/component\";\nimport { InputTitle } from \"../../components/InputTitle/component\";\nimport { InputDescription } from \"../../components/InputDescription/component\";\nimport { InputLink } from \"../../components/InputLink/component\";\nimport { InputTags } from \"../../components/InputTags/component\";\nimport { RecordCreateForm } from \"../../components/RecordCreateForm/component\";\nimport {\n    getRecords, addRecord, addTag, getTags,\n} from \"../../database\";\n\n\nconst RecordCreate = (props) => {\n    const {\n        setValueNewRecord,\n        newRecord,\n        tags,\n        showForm,\n        closeForm,\n        openForm,\n        setNewRecordsList,\n        setNewTagsList,\n    } = props;\n\n    const updateStore = () => {\n        getRecords().then((data) => setNewRecordsList(data));\n        getTags().then((data) => setNewTagsList(data));\n    };\n\n    const addRecordToDB = (record) => {\n        record.tags.map((tag) => addTag({ id: tag, value: tag }));\n        addRecord(record).then(() => {\n            updateStore();\n            closeForm();\n        });\n    };\n\n\n    return (\n        <div className=\"create-record\">\n            <div className=\"button-wrapper\">\n                <Button\n                    type=\"primary\"\n                    block\n                    icon=\"plus-circle\"\n                    size=\"large\"\n                    onClick={openForm}\n                >\nAdd new record\n\n                </Button>\n            </div>\n\n            <RecordCreateForm\n                newRecordData={newRecord}\n                onCreate={addRecordToDB}\n                visible={showForm}\n                closeForm={closeForm}\n            >\n                <InputType value={newRecord.type} onChange={(value) => setValueNewRecord(\"type\", value)} />\n                {\n                    [\"video\", \"article\"].includes(newRecord.type)\n                        ? <InputLink onChange={(value) => setValueNewRecord(\"link\", value)} />\n                        : null\n                }\n                <InputTitle value={newRecord.title} onChange={(value) => setValueNewRecord(\"title\", value)} />\n                <InputDescription value={newRecord.description} onChange={(value) => setValueNewRecord(\"description\", value)} />\n                <InputTags value={newRecord.tags} onChange={(value) => setValueNewRecord(\"tags\", value)}>\n                    {tags}\n                </InputTags>\n            </RecordCreateForm>\n        </div>\n\n    );\n};\n\nconst mapStateToProps = (store) => ({\n    newRecord: store.records.newRecord,\n    tags: store.tags.list,\n    showForm: store.records.showForm,\n});\n\nconst actions = {\n    setValueNewRecord: setValueNewRecordAction,\n    closeForm: closeFormAction,\n    openForm: openFormAction,\n    setNewRecordsList: setNewRecordsListAction,\n    setNewTagsList: setNewTagsListAction,\n};\n\nexport const RecordCreateContainer = connect(mapStateToProps, actions)(RecordCreate);\n","import React from \"react\";\nimport { RecordsListContainer } from \"../../containers/RecordsList/container\";\nimport { RecordCreateContainer } from \"../../containers/RecordCreate/container\";\n\nfunction Main() {\n    return (\n        <div>\n            <RecordsListContainer />\n            <RecordCreateContainer />\n        </div>\n    );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Main from \"./pages/Main/page\";\n\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Route path=\"/\" exact component={Main} />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers/combined\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\n// Get all the articles in date order:\n// console.log(db.getAllFromIndex(\"articles\", \"date\"));\n// }\n\n\nconst store = createStore(\n    reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}